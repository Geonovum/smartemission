# docker-compose file for Ubuntu 14.04
# diff with docker-compose.yml : node-exporter and cAdvisor run on host
# Adapted from Brian Christner's: https://github.com/vegasbrianc/prometheus
# All credits there!
# Taken version-2 branch on dec 18, 2017.
#
# Changes by Just van den Broecke:
# - removed Docker Swarm stuff (why needed?)
# - removed port mappings (prevent outside access)
# - run on local bridge network  (network_mode: bridge, as to be proxied from Apache web container)

version: '3.1'

volumes:
    prometheus_data: {}
    grafana_data: {}

#networks:
#  front-tier:
#  back-tier:

services:

  grafana:
    image: grafana/grafana:4.6.3
    labels:
      - "traefik.backend=grafanamon"
      - "traefik.enable=true"
      - "traefik.frontend.priority=600"
      - "traefik.frontend.rule=Method:GET"
      - "traefik.frontend.rule=HostRegexp:{subdomain:[a-z]+}.smartemission.nl;PathPrefixStrip:/adm/grafanamon"
      # - "traefik.frontend.auth.basic=sadmin:$$apr1$$gVo/HcPx$$2AudzGfyX7Xxg7aD/b1zf."
      - "traefik.docker.network=se_back"

    depends_on:
      - prometheus
    links:
      - prometheus:prometheus
#    ports:
#      - 3000:3000
    volumes:
      - grafana_data:/var/lib/grafana
    env_file:
      - grafana/grafana.conf
    networks:
      # Visible in SE backend and frontend Docker network
      - se_back

  prometheus:
    # image: prom/prometheus:v2.0.0
    image: prom/prometheus:latest
    labels:
      - "traefik.backend=prometheus"
      - "traefik.enable=true"
      - "traefik.frontend.priority=600"
      - "traefik.frontend.rule=Method:GET"
      - "traefik.frontend.rule=HostRegexp:{subdomain:[a-z]+}.smartemission.nl;PathPrefixStrip:/adm/prometheus"
      # - "traefik.frontend.auth.basic=sadmin:$$apr1$$gVo/HcPx$$2AudzGfyX7Xxg7aD/b1zf."
      - "traefik.docker.network=se_back"
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus-gen.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - "--web.external-url=http://${se_host}${se_port}/adm/prometheus"
     # - '--storage.tsdb.retention=200h'
     # - '--web.route-prefix=/prometheus'

#    ports:
#      - 9090:9090
    links:
      # - cadvisor:cadvisor
      # - node-exporter:node-exporter
      - alertmanager:alertmanager
    # depends_on:
      # - cadvisor
      # - node-exporter

    networks:
      # Visible in SE backend and frontend Docker network
      - se_back
    restart: unless-stopped
#    deploy:
#      placement:
#        constraints:
#          - node.hostname == moby

  alertmanager:
    image: prom/alertmanager
#    ports:
#      - 9093:9093
    volumes:
      - ./alertmanager/:/etc/alertmanager/
    networks:
      # Visible in SE backend and frontend Docker network
      - se_back
    restart: unless-stopped
    command:
      - '-config.file=/etc/alertmanager/config-gen.yml'
      - '-storage.path=/alertmanager'

networks:
  se_back:
    external: true

#    deploy:
#      placement:
#        constraints:
#          - node.hostname == moby

#  node-exporter:
#    image: prom/node-exporter
#    volumes:
#      - /proc:/host/proc:ro
#      - /sys:/host/sys:ro
#      - /:/rootfs:ro
#    command:
#      - '--path.procfs=/host/proc'
#      - '--path.sysfs=/host/sys'
#      - --collector.filesystem.ignored-mount-points
#      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
#    ports:
#      - 9100:9100
#    network_mode: bridge
#    networks:
#      - back-tier
#    restart: always
#    deploy:
#      mode: global

  # cadvisor:
    # image: google/cadvisor
    # image: geonovum/cadvisor:v0.28.3
    # volumes:
      # - /:/rootfs:ro
      # - /var/run:/var/run:rw
      # - /sys:/sys:ro
      # - /var/lib/docker/:/var/lib/docker:ro
#    ports:
#      - 8080:8080
    # network_mode: bridge
#    networks:
#      - back-tier
    # restart: always
#    deploy:
#      mode: global

