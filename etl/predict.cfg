# Smart Emission Data Extract ETL - Stetl config
#
# Pieter Marsman - 2016
#
# This config reads the raw timeseries measurements from the DB, and RIVM
# timeseries from their API, merges those and uses it to create a calibration
# model.

# The main Stetl ETL chain
[etl]
chains = input_jose|output_std
#|input_calibration_model|predict|(output_postgres)(output_influx)

[input_jose]
class = calibration_input.PredictDbInput
output_format = record_array
host = {pg_host}
database = {pg_database}
user = {pg_user}
password = {pg_password}
schema = {pg_schema_refined}
table = timeseries
column_names = device_id,name,time,value,lon,lat
query = SELECT device_id, name, time, value FROM timeseries WHERE name IN ({values_to_input}) AND sample_count > {min_jose_measurements} AND time > '{calibration_start_time}' AND gid > %s ORDER BY gid
last_gid_query = SELECT gid FROM timeseries WHERE name IN ('carbon_monoxide__air_','nitrogen_dioxide__air_','ozone__air_') ORDER BY gid DESC LIMIT 1

[input_calibration_model]
class = calibration_input.CalibrationModelInput
input_format = record
host = {pg_host}
database = {pg_database}
user = {pg_user}
password = {pg_password}
schema = {pg_schema_calibrated}
table = calibration_models
query = SELECT id,parameters,model from calibration_models WHERE predicts = '%s' AND invalid = FALSE ORDER BY timestamp DESC LIMIT 1
state_query = SELECT state from calibration_state WHERE process = '%s' AND model_id = %d ORDER BY timestamp DESC LIMIT 1
sensor_model_names = {{'co': 'carbon_monoxide__air_','no2':'nitrogen_dioxide__air_','o3':'ozone__air_'}}
process_name = refiner
output_format = record

[output_postgres]
# todo write predicted values to postgres

[output_influxdb]
class = influxdboutput.InfluxDbOutput
input_format = record_array
method = POST
list_fanout = False
content_type = application/x-www-form-urlencoded
host = {influx_host}
port = {influx_port}
database = {influx_se_database}
measurement = {influx_se_measurement_refined}
tags_map = {{'station': 'device_id', 'component': 'name' }}
fields_map = {{'value': 'value'}}
time_attr = time
# geohash_map = {{'lat': 'lat', 'lon': 'lon' }}
geohash_wkt_attr = point
user = {influx_se_writer}
password = {influx_se_writer_password}

# for testing/debugging
[output_std]
class = outputs.standardoutput.StandardOutput