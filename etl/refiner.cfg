# Smart Emission Data Refiner ETL - Stetl config
#
# Just van den Broecke - 2016
#
# This config reads the raw timeseries measurements from the DB, refines these
# and writes results in the measurements DB.

# The main Stetl ETL chain
[etl]
chains = input_raw_sensor_db| (refine_filter|output_postgres_insert) (refine_filter_small|output_influxdb_write)
# chains = input_raw_sensor_db|refine_filter|output_influxdb_write
# chains = input_raw_sensor_db|refine_filter|output_std

# read raw data from timeseries table
[input_raw_sensor_db]
class = smartemdb.RawDbInput
host = {pg_host}
database = {pg_database}
user = {pg_user}
password = {pg_password}
schema = {pg_schema_raw}
table = timeseries
output_format = record
last_gid_query = SELECT gid_raw from smartem_refined.refiner_progress WHERE device_id = 12
max_input_records = {refiner_max_input_records}
gids_query = SELECT gid from timeseries WHERE gid > %d AND gid <= %d ORDER BY gid
data_query = SELECT * from timeseries WHERE gid = %d
read_once = {refiner_raw_read_once}

[input_calibration_model]
class = calibration.CalibrationModelInput
input_format = record
host = {pg_host}
database = {pg_database}
user = {pg_user}
password = {pg_password}
schema = {pg_schema_calibrated}
table = calibration_models
query = SELECT model from calibration_models WHERE predicts = '%s' AND invalid = FALSE ORDER BY timestamp DESC LIMIT 1
sensor_model_names = {{'co': 'carbon_monoxide__air_','no2':'nitrogen_dioxide__air_','o3':'ozone__air_'}}
output_format = record

# Refines raw records for specified sensor names
[refine_filter]
class = refiner.RefineFilter
input_format = record
sensor_names = temperature,humidity,pressure,noiseavg,noiselevelavg,co2,o3,co,no2,o3raw,coraw,no2raw
# sensor_names = o3,co,no2,co2

# Refines raw records for specified sensor names
[refine_filter_small]
class = refiner.RefineFilter
# sensor_names = temperature,humidity,pressure,noiseavg,noiselevelavg,co2,o3,co,no2,o3raw,coraw,no2raw
sensor_names = o3,co,no2,co2

# for testing/debugging
[output_std]
class = outputs.standardoutput.StandardOutput

# Insert file records
[output_postgres_insert]
class = outputs.dboutput.PostgresInsertOutput
input_format = record_array
host = {pg_host}
database = {pg_database}
user = {pg_user}
password = {pg_password}
schema = {pg_schema_refined}
table = timeseries
replace=True

# Write records to InfluxDB server  EXAMPLE
[output_influxdb_write]
class = influxdboutput.InfluxDbOutput
input_format = record_array
method = POST
list_fanout = False
content_type = application/x-www-form-urlencoded
host = {influx_host}
port = {influx_port}
database = {influx_se_database}
measurement = {influx_se_measurement_refined}
tags_map = {{'station': 'device_id', 'component': 'name' }}
fields_map = {{'value': 'value'}}
time_attr = time
# geohash_map = {{'lat': 'lat', 'lon': 'lon' }}
geohash_wkt_attr = point
user = {influx_se_writer}
password = {influx_se_writer_password}
