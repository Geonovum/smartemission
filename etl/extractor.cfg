# Smart Emission Data Extract ETL - Stetl config
#
# Pieter Marsman - 2016
#
# This config reads the raw timeseries measurements from the DB,
# validates the measurements and extract these results to standard output

# The main Stetl ETL chain
[etl]
chains = input_raw_sensor_db|extract_filter|output_influxdb_write|compute_progress|update_progress

# read raw data from timeseries table
[input_raw_sensor_db]
class = smartemdb.RawDbInput
host = {pg_host}
database = {pg_database}
user = {pg_user}
password = {pg_password}
schema = {pg_schema_raw}
table = timeseries
output_format = record
last_gid_query = SELECT gid FROM smartem_extracted.extractor_progress
max_input_records = {extractor_max_input_records}
gids_query = SELECT gid from timeseries WHERE gid > %d AND gid <= %d ORDER BY gid
data_query = SELECT * from timeseries WHERE gid = %d

# Subtracts raw records for specified sensor names
[extract_filter]
class = extractor.ExtractFilter
device_ids = 1,9
sensor_names = temperature,humidity,pressure,co2,o3raw,coraw,no2raw
# sensor_names = temperature,humidity,pressure,noiseavg,noiselevelavg,co2,o3,co,no2,o3raw,coraw,no2raw

# Write records to InfluxDB server
[output_influxdb_write]
class = influxdboutput.InfluxDbOutput
input_format = record_array
method = POST
list_fanout = False
content_type = application/x-www-form-urlencoded
host = {influx_host}
port = {influx_port}
database = {influx_se_database}
measurement = {influx_se_measurement_extract}
tags_map = {{'station': 'device_id', 'component': 'name'}}
fields_map = {{'value': 'value'}}
time_attr = time
# geohash_map = {{'lat': 'lat', 'lon': 'lon' }}
geohash_wkt_attr = point
user = {influx_se_writer}
password = {influx_se_writer_password}
output_format = record_array

# Compute last gid
[compute_progress]
class = extractor.ProgressFilter
input_format = record_array
host = {pg_host}
database = {pg_database}
user = {pg_user}
password = {pg_password}
schema = {pg_schema_extracted}
table = extractor_progress
replace = TRUE
output_format = record

# Store last gid
[update_progress]
class = outputs.dboutput.PostgresInsertOutput
input_format = record
host = {pg_host}
database = {pg_database}
user = {pg_user}
password = {pg_password}
schema = {pg_schema_extracted}
table = extractor_progress
key = id
replace = TRUE