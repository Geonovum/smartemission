# Smart Emission Data Last Values - Stetl config
#
# Just van den Broecke - 2016
#
# This config reads the last raw measurements from the CityGIS Sensor REST API.

# The main Stetl ETL chain
[etl]
chains = (input_calibration_model)(input_raw_sensor_last_api_1)|(output_postgres_insert)(output_model_state),
			(input_calibration_model)(input_raw_sensor_last_api_2)|(output_postgres_insert)(output_model_state)

[input_calibration_model]
class = calibration_input.CalibrationModelInput
host = {pg_host}
database = {pg_database}
user = {pg_user}
password = {pg_password}
schema = {pg_schema_calibrated}
table = calibration_models
query = SELECT id,parameters,model from calibration_models WHERE predicts = '%s' AND invalid = FALSE ORDER BY timestamp DESC LIMIT 1
state_query = SELECT state from calibration_state WHERE process = '%s' AND model_id = %d ORDER BY timestamp DESC LIMIT 1
sensor_model_names = {{'co': 'carbon_monoxide__air_','no2':'nitrogen_dioxide__air_','o3':'ozone__air_'}}
process_name = last
output_format = record_array

# for reading files from CityGIS Sensor REST API
[input_raw_sensor_last_api_1]
class = rawsensorapi.RawSensorLastInput
input_format = record_array
url = {raw_device_url_1}
api_interval_secs = 0
sensor_names = temperature,humidity,pressure,noiseavg,noiselevelavg,co2,co,no2,o3,coraw,no2raw,o3raw,pm10,pm2_5

# for reading files from Intemo Sensor REST API
[input_raw_sensor_last_api_2]
class = rawsensorapi.RawSensorLastInput
input_format = record_array
url = {raw_device_url_2}
api_interval_secs = 0
sensor_names = temperature,humidity,pressure,noiseavg,noiselevelavg,co2,co,no2,o3,coraw,no2raw,o3raw,pm10,pm2_5
auth = {{ 'type': 'token', 'keyword': 'Bearer', 'token': '{intemo_token}' }}

# for testing/debugging
[output_std]
class = outputs.standardoutput.StandardOutput

# Insert file records
[output_postgres_insert]
class = outputs.dboutput.PostgresInsertOutput
input_format = record_array
host = {pg_host}
database = {pg_database}
user = {pg_user}
password = {pg_password}
schema = {pg_schema_rt}
table = last_device_output
key=unique_id
replace=True

# Insert model state
[output_model_state]
class = calibration_output.CalibrationStateOutput
host = {pg_host}
database = {pg_database}
user = {pg_user}
password = {pg_password}
schema = {pg_schema_calibrated}
table = calibration_state
sensor_model_names = {{'co': 'carbon_monoxide__air_','no2':'nitrogen_dioxide__air_','o3':'ozone__air_'}}
process_name = last
